/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.52).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-02-06T14:33:15.813610929Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "", description = "get all users", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "401", description = "not authorized") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> usersGet();


    @Operation(summary = "", description = "delete user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "401", description = "not authorized"),
        
        @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<User> usersIdDelete(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
);


    @Operation(summary = "", description = "get one user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin", "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "401", description = "not authorized"),
        
        @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> usersIdGet(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
);


    @Operation(summary = "", description = "update user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "401", description = "not authorized"),
        
        @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<User> usersIdPatch(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
, @Parameter(in = ParameterIn.DEFAULT, description = "data to update user-informations", required=true, schema=@Schema()) @Valid @RequestBody User body
);


    @Operation(summary = "", description = "update user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "401", description = "not authorized"),
        
        @ApiResponse(responseCode = "404", description = "user not found") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> usersIdPut(@Parameter(in = ParameterIn.PATH, description = "ID of user", required=true, schema=@Schema()) @PathVariable("id") String id
, @Parameter(in = ParameterIn.DEFAULT, description = "data to update user-informations", required=true, schema=@Schema()) @Valid @RequestBody User body
);


    @Operation(summary = "", description = "create user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Admin" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "bad request"),
        
        @ApiResponse(responseCode = "401", description = "not authorized") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> usersPost(@Parameter(in = ParameterIn.DEFAULT, description = "data of the new user", schema=@Schema()) @Valid @RequestBody User body
);

}

